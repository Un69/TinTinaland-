test代码：
// 引入断言模块，用于测试
const assert = require("assert");
// 引入MintableERC721合约，用于创建NFT
const MintableERC721 = artifacts.require("MintableERC721");

// 定义一个合约测试套件
contract("MintableERC721",async accounts =>{
    
    // 定义一个测试用例，测试NFT的铸造功能
    it("MintNFT",async()=>{
        // 部署合约实例
        const instance = await MintableERC721.deployed();
        
        // 获取合约的名称
        const name = await  instance.name.call();

        // 断言合约的名称是"Mintable NFT"
        assert.equal(name,"Mintable NFT");
    

        // 定义一个接收者地址数组
        let receivers = [
            accounts[1],
            accounts[1],
            accounts[2],
            accounts[3]
        ]

        // 定义一个URI数组，用于存储NFT的元数据
        let uris = [
            "ipfs://0mdHerrPe34cCBriKgZkbH9i8D6WqbcDfVgeTMxsYpgFog",
            "ipfs://0mdHerrPe34cCBriKgZkbH9i8D6WqbcDfVgeTMxsYpgFog",
            "ipfs://0mdHerrPe34cCBriKgZkbH9i8D6WqbcDfVgeTMxsYpgFog",
            "ipfs://0mdHerrPe34cCBrikgZkbH9i8D6WqbcDfVgeTMxsYpgFog"
        ]


        // 调用合约的mint函数，向接收者地址铸造NFT，并传入URI
        await instance.mint(receivers, uris);
        // 获取第一个接收者的余额（即拥有的NFT数量）
        const account_one_balance = await instance.balanceOf.call(accounts[1]);
        // 断言第一个接收者的余额是2（因为铸造了两个相同的NFT）
        assert.equal(account_one_balance.toNumber(),2);
        // 获取第二个NFT的拥有者地址
        const owner_of_two = await instance.ownerOf.call (2);
        // 断言第二个NFT的拥有者是第三个接收者地址
        assert.equal(owner_of_two, accounts[2]);
        // 获取合约的当前代币ID（即已铸造的NFT总数）
        const nextTokneId = await instance._CUR_TOKENID_.call();
        // 断言当前代币ID是4（因为铸造了四个NFT）
        assert.equal(nextTokneId.toNumber(),4);    
    })
})
 
