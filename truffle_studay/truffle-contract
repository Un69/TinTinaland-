// 指定合约的许可证类型为GPL-3.0
// SPDX-License-Identifier: GPL-3.0
// 导入OpenZeppelin库中的ERC721URIStorage合约，用于存储NFT的URI
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
// 导入OpenZeppelin库中的ERC721合约，用于实现NFT的标准接口
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
// 导入OpenZeppelin库中的Ownable合约，用于限制只有合约拥有者才能铸造NFT
import "@openzeppelin/contracts/access/Ownable.sol";
// 指定编译器的版本为0.8.19
pragma solidity 0.8.19;


// 定义一个合约，继承自ERC721URIStorage和Ownable
contract MintableERC721 is ERC721URIStorage,Ownable {
// 定义一个公开的状态变量，用于记录当前的代币ID（即已铸造的NFT总数）
    uint256 public _CUR_TOKENID_;
    // 定义一个构造函数，传入NFT的名称和符号，并调用父类的构造函数
    constructor(string memory _name, string memory _symbol)ERC721(_name,_symbol){}
    // 定义一个函数，用于铸造新的NFT，只有合约拥有者才能调用
    function mint(
        // 接收一个地址数组，表示NFT的接收者
        address[] calldata receivers,
        // 接收一个字符串数组，表示NFT的URI
        string[] calldata uris
    )external onlyOwner{
        // 要求接收者数组和URI数组的长度相等，否则抛出异常
        require(receivers.length == uris.length,"PARAMS_NOT_MATCH");
        // 遍历接收者数组和URI数组
        for(uint256 i =0 ;i <receivers.length ;i++){
            // 调用父类的安全铸造函数，将当前代币ID对应的NFT铸造给接收者地址
            _safeMint(receivers[i],_CUR_TOKENID_);
            // 调用父类的设置URI函数，将当前代币ID对应的NFT设置为给定的URI
            _setTokenURI(_CUR_TOKENID_, uris[i]);
            // 将当前代币ID加一，为下一个NFT准备
            _CUR_TOKENID_ = _CUR_TOKENID_ + 1 ;
        }
    }
} 
